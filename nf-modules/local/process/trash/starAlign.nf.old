/*
 * STAR reads alignment
 * External parameters :
 * @ params.starOpts : addition STAR alignment parameters
 */

process starAlign{
  tag "${prefix} on ${genomeName}"
  label 'star'
  label 'highCpu'
  label 'extraMem'
  publishDir "${params.outDir}/mapping", mode: 'copy',
             saveAs: {filename ->
             if (filename.indexOf(".log") > 0) "logs/$filename"
             else if (params.saveAlignedIntermediates) filename}

  input:
  tuple val(prefix), path(reads), path(index), val(genomeName)

  output:
  tuple val(prefix), val(genomeName), path("*.bam"), emit: bam 
  path("*Log.final.out"), emit: logs
  path("versions.txt"), emit: versions

  script:
  //prefix = genomeName == genomeRef ? sample : sample + '_spike'
  //opts = params.starOpts
  """
  echo "STAR "\$(STAR --version 2>&1) > versions.txt
  STAR --genomeDir $index \
       --readFilesIn $reads \
       --runThreadN ${task.cpus} \
       --runMode alignReads \
       --outSAMtype BAM Unsorted \
       --readFilesCommand zcat \
       --runDirPerm All_RWX \
       --outSAMunmapped Within \
       --outTmpDir ${params.tmpDir}/chipseq_\$(date +%d%s%S%N) \
       --outFileNamePrefix $prefix  \
       --outSAMattrRGline ID:$prefix SM:$prefix LB:Illumina PL:Illumina \
       ${params.starOpts}

  """
}

