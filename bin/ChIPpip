#!/bin/bash

## ChIP Research Pipeline
## Copyleft 2018 Institut Curie
## Author(s):  Nicolas Servant, AurÃ©lie Teissandier
## Contact: nicolas.servant@curie.fr
## This software is distributed without any guarantee under the terms of the GNU General
## Public License, either Version 2, June 1991 or Version 3, June 2007.

SOFT="ChIPpip"
VERSION="0.0.2"
MODE="narrow"

function usage {
    echo -e "usage : $SOFT -f FORWARD -o OUTPUT -c CONFIG [-r REVERSE][-b BAM][-F CONTROL_FORWARD][-R CONTROL_REVERSE][-B CONTROL_BAM][-s SAMPLE_ID] [-p PEAK_MODE] [-d] [-h] [-v]"
    echo -e "Use option -h|--help for more information"
}

function help {
    usage;
    echo
    echo "$SOFT $VERSION"
    echo "---------------"
    echo "OPTIONS"
    echo
    echo "   -f|--forward TREATMENT_FORWARD: forward fastq file for ChIP"
    echo "   -c|--conf CONFIG: configuration file for ChIP processing"
    echo "   -o|--output OUTPUT: output folder"
    echo "   [-r|--reverse TREATMENT_REVERSE]: reverse fastq file for ChIP"
    echo "   [-b|--bam TREATMENT_BAM]: aligned BAM file for ChIP"
    echo "   [-F|--controlforward CONTROL_FORWARD]: forward fastq file for Control"
    echo "   [-R|--controlreverse CONTROL_REVERSE]: reverse fastq file for Control"
    echo "   [-B|--controlbam CONTROL_BAM]: BAM file for Control"
    echo "   [-p|--peaks]: Mode for peak calling. Must be 'narrow', 'broad', or 'verybroad'"
    echo "   [-s|--sample ID]: sample ID"
    echo "   [-d|--dryrun]: dry run mode"
    echo "   [-h|--help]: help"
    echo "   [-v|--version]: version"
    exit;
}

function version {
    echo -e "$SOFT version $VERSION"
    exit
}

function set_dry_run {
    DRY_RUN=1
}

function opts_error {
    echo -e "Error : invalid parameters !" >&2
    echo -e "Use $SOFT -h for help"
    exit
}

if [ $# -lt 1 ]
then
    usage
    exit
fi

# Transform long options to short ones
for arg in "$@"; do
  shift
  case "$arg" in
      "--reverse") set -- "$@" "-r" ;;
      "--forward") set -- "$@" "-f" ;;
      "--bam") set -- "$@" "-b" ;;
      "--controlreverse") set -- "$@" "-R" ;;
      "--controlforward") set -- "$@" "-F" ;;
      "--controlbam") set -- "$@" "-B" ;;
      "--peaks") set -- "$@" "-p" ;;
      "--output") set -- "$@" "-o" ;;
      "--conf")   set -- "$@" "-c" ;;
      "--sample")   set -- "$@" "-s" ;;
      "--dryrun")   set -- "$@" "-d" ;;
      "--help")   set -- "$@" "-h" ;;
      "--version")   set -- "$@" "-v" ;;
      *)        set -- "$@" "$arg"
  esac
done

while getopts "f:r:b:F:R:B:o:c:p:s:dvh" OPT
do
    case $OPT in
        f) FORWARD=$OPTARG;;
	r) REVERSE=$OPTARG;;
        b) BAM=$OPTARG;;
        F) CONTROL_FORWARD=$OPTARG;;
        R) CONTROL_REVERSE=$OPTARG;;
	B) CONTROL_BAM=$OPTARG;;
	p) MODE=$OPTARG;;
	o) ODIR=$OPTARG;;
	c) CONF=$OPTARG;;
	s) SAMPLE_ID=$OPTARG;;
	d) set_dry_run ;;
	v) version ;;
	h) help ;;
	\?)
		echo "Invalid option: -$OPTARG" >&2
		usage
		 exit 1
		 ;;
	:)
		echo "Option -$OPTARG requires an argument." >&2
		usage
		exit 1
		;;
	esac
done

if [[ (-z $FORWARD && -z $BAM) || -z $ODIR || -z $CONF ]]; then
    usage
    exit
fi

## Set PATHS
BIN_PATH=`dirname "$0"`
ABS_BIN_PATH=`cd "$BIN_PATH"; pwd`
SCRIPTS_PATH="$ABS_BIN_PATH/../scripts/"

## Load functions file
. $SCRIPTS_PATH/utils.inc.sh
. $SCRIPTS_PATH/chip.inc.sh

echo -e "--------------------"
echo -e "Running ${SOFT} v${VERSION}"
when=$(date +%Y-%m-%d)
echo -e "Date: ${when}"
where=$(hostname)
echo -e "Host: ${where}"
echo -e "ChIP: ${FORWARD} ${REVERSE}"
echo -e "Input: ${CONTROL_FORWARD} ${CONTROL_REVERSE}"
echo -e "Bam(s): ${BAM} ${CONTROL_BAM}"
echo -e "Ouput: ${ODIR}"
echo -e "Config: ${CONF}"
if [[ ! -z $SAMPLE_ID ]]; then
    echo -e "SampleID: ${SAMPLE_ID}"
fi
echo -e "--------------------"
echo


#####################
## Check Config file
#####################

if [ ! -z "$CONF" ]; then
    CONF=`abspath $CONF`
    if [ -e "$CONF" ]; then
        read_config $CONF
    else
        echo "Error - config file '$CONF' not found"
        exit
    fi
fi

###################
## WORKFLOW
###################

mkdir -p ${ODIR}/logs

## 1- MAPPING + RM_DUP
if [ -z $BAM ]; then
    ## Alignment on reference (or reference+spikes) genome
    bowtie2_func "${FORWARD} ${REVERSE}" ${ODIR}
    build=$(basename $BOWTIE2_IDX_PATH)
    BAM=${ODIR}/mapping/$(basename $FORWARD | sed -e 's/.fastq\(.gz\)*/_'${build}'.bam/')
    indexBam ${BAM}

    ## Remove duplicates
    rmDup_func $BAM ${ODIR}
    BAMnoDUP=${ODIR}/mapping/$(basename $BAM | sed -e 's/.bam/_noDup.bam/')
    indexBam ${BAMnoDUP}

    ## Extract Spike reads only in case of spike-in usage
    OPREFIX=$(basename $FORWARD | sed -e 's/.fastq\(.gz\)*/_noDup_spikes/')
    extract_chr_from_bam ${BAM} ${SPIKE_CHROMSIZES} ${MIN_MAPQ} ${ODIR} ${OPREFIX}
    indexBam ${ODIR}/mapping/${OPREFIX}.bam
    
    ## Extract Reference reads only
    OPREFIX=$(basename $FORWARD | sed -e 's/.fastq\(.gz\)*/_noDup_ref_'${GENOME}'/')
    extract_chr_from_bam ${BAM} ${REFERENCE_CHROMSIZES} ${MIN_MAPQ} ${ODIR} ${OPREFIX}
    indexBam ${ODIR}/mapping/${OPREFIX}.bam

    ## The next steps of the analysis have to be run on the reference bam only
    BAMnoDUP=${ODIR}/mapping/${OPREFIX}.bam
else
    BAMnoDUP=${BAM}
fi

## 2- Fragment size for PE data
if [[ $(isPEexperiment $BAMnoDUP) == "1" ]]; then
    if [ -z "${SAMPLE_ID}" ]; then
	fragSize_func $BAMnoDUP ${ODIR} $(basename $BAM .bam)
    else
	fragSize_func $BAMnoDUP ${ODIR} ${SAMPLE_ID}
    fi
else
    echo -e
    echo -e "Warning: SE experiment detected. Cannot infer fragment size"
    echo -e
fi


## 3- BigWig
bw_func ${BAMnoDUP} ${ODIR}
if [ ! -z $CONTROL_BAM ]; then
    bw_func ${CONTROL_BAM} ${ODIR}
fi
BIGWIG=$(basename ${BAMnoDUP} "_noDup.bam").bw

## 4- Stats
mapping_stat "${FORWARD} ${REVERSE}" ${CONF} ${BAM} ${ODIR}

#############################################################
## Optional part is starting here 
## Input is REQUIRED

## Input mapping
if [[ ! -z $CONTROL_FORWARD ]]; then
    bowtie2_func "${CONTROL_FORWARD} ${CONTROL_REVERSE}" ${ODIR}
    build=${basename $BOWTIE2_IDX_PATH}
    CONTROL_BAM=${ODIR}/mapping/$(basename $CONTROL_FORWARD | sed -e 's/.fastq\(.gz\)*/_'${build}'.bam/')

    ## Extract Reference reads only (note that spikes are not expected in control samples)
    OPREFIX=$(basename $CONTROL_FORWARD | sed -e 's/.fastq\(.gz\)*/_ref_'${GENOME}'/')
    extract_chr_from_bam ${CONTROL_BAM} ${REFERENCE_CHROMSIZES} ${ODIR} ${OPREFIX}
    CONTROL_BAM=${ODIR}/mapping/${OPREFIX}.bam
    indexBam ${CONTROL_BAM}

    ## Remove duplicates
    rmDup_func $CONTROL_BAM ${ODIR}
    CONTROL_BAMnoDUP=${ODIR}/mapping/$(basename $CONTROL_BAM | sed -e 's/.bam/_noDup.bam/')
elif [[ ! -z $CONTROL_BAM ]]; then
    CONTROL_BAMnoDUP=${CONTROL_BAM}
fi

if [[ ! -z ${CONTROL_BAMnoDUP} ]]; then
    ## Index bam
    indexBam ${BAMnoDUP}

    ## Bigwig over input
    bw_over_input_func ${BAMnoDUP} ${CONTROL_BAMnoDUP} ${ODIR}

    ## ChIP enrichment
    chipenrich_func "${BAMnoDUP} ${CONTROL_BAMnoDUP}" ${ODIR}

    ## Peak calling
    if [[ ${MODE} == "verybroad" ]]; then
	epic_func ${BAMnoDUP} ${CONTROL_BAMnoDUP} ${ODIR}
	PEAKS=${ODIR}/peaks/$(basename ${BAMnoDUP} | sed -e 's/.bam//')_results.bed
    else
	macs_func ${BAMnoDUP} ${CONTROL_BAMnoDUP} ${ODIR} ${MODE}
    	if [[ ${MODE} == "broad" ]]; then
	    PEAKS=${ODIR}/peaks/$(basename ${BAMnoDUP} | sed -e 's/.bam//')_peaks.broadPeak
	else
	    PEAKS=${ODIR}/peaks/$(basename ${BAMnoDUP} | sed -e 's/.bam//')_peaks.narrowPeak
	fi
    fi

    ## FRIP = fraction of reads in peaks
    if [  -e $PEAKS ]; then
	frip ${BAMnoDUP} ${PEAKS} ${ODIR}
    fi

    ## 8- REGI - Relative Enrichment in Genomics Intervals
    #if [ -e $PEAKS ]; then
	#heatmap_func ${ODIR}/tracks/${BIGWIG} "${GENE_BED}" ${ODIR}
    #fi
else
    echo -e
    echo -e "Warning: Control sample is not specified ! skipping all Control-based steps ... "
    echo -e
fi

#### Samples correlation - require multisamples

#### IDR - require multisamples + not broad
