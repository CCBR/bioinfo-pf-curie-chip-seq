/*
 * -------------------------------------------------
 *  Chip-seq Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

manifest {
	name = 'Chip-seq'
	author = 'TODO'
	homePage = 'https://gitlab.com/chipseq'
	description = 'TODO'
	mainScript = 'main.nf'
	nextflowVersion = '>=0.32.0'
	version = '1.0dev'
}

// Global default params, used in configs
params {
	container = ''
	help = false 

	// Workflow flags
	name = false
	genome = false
	reads = null
	samplePlan = null
	design = null
	outdir = './results'
	singleEnd = false

	// default options
	tracedir = "${params.outdir}/pipeline_info"
	email = false
	plaintext_email = false

	// more options
	multiqcConfig = "$baseDir/assets/multiqc_config.yaml"
	outputDoc = "$baseDir/docs/output.md"
	metadata = "$baseDir/assets/metadata.tsv"
	bamtoolsFilterPEConfig = "$baseDir/assets/bamtools_filter_pe.json"
  	bamtoolsFilterSEConfig = "$baseDir/assets/bamtools_filter_se.json"

	// alignment
	aligner = 'bwa-mem'

	// filtering
	keep_dups = false
	keep_multi_map = false

	// preseq
	preseq_defect = false

	// peak calling
	noInput = false
	broad_cutoff = 0.1

	// IDR
	replicates = false

	//skips
	skipMultiqc = false
	skipFastqc = false
	skipAlignment = false
	skipPreseq = false
	skipFiltering = false
	skipPpqt = false
	skipDeepTools = false
	skipPeakcalling = false
	skipPeakanno = false
	skipPeakQC = false
	skipIdr = false

	// Spike-in
	spike = false
}

/*
 * Configs and profiles
 */

// Additional configs
includeConfig 'conf/base.config'
includeConfig 'conf/genomes.config'
includeConfig 'conf/tools.config'

// Profiles
profiles {
	conda { process.conda = "$baseDir/environment.yml" }
	docker { docker.enabled = true }
	singularity { singularity.enabled = true }
	curie {
		includeConfig 'conf/curie.config'
	}
	test {
		includeConfig 'conf/test.config'
	}
	toolsPath {
		includeConfig 'conf/tools-path.config'
	}
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Metrics files
timeline {
	enabled = true
	file = "${params.tracedir}/timeline.html"
}
report {
	enabled = true
	file = "${params.tracedir}/report.html"
}
trace {
	enabled = true
	file = "${params.tracedir}/trace.txt"
}
dag {
	enabled = true
	file = "${params.tracedir}/DAG.png"
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
	if(type == 'memory'){
		try {
		if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
			return params.max_memory as nextflow.util.MemoryUnit
		else
			return obj
		} catch (all) {
		println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
		return obj
		}
	} else if(type == 'time'){
		try {
		if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
			return params.max_time as nextflow.util.Duration
		else
			return obj
		} catch (all) {
		println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
		return obj
		}
	} else if(type == 'cpus'){
		try {
		return Math.min( obj, params.max_cpus as int )
		} catch (all) {
		println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
		return obj
		}
	}
}


