/*
 * -------------------------------------------------
 *  Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performace compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 */

process {
  container = params.container

  // Check the defaults for all processes
  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 4.GB * task.attempt, 'memory' ) }
  time = { check_max( 2.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'finish' }
  maxRetries = 1
  maxErrors = '-1'


  // Process-specific resource requirements
  // Customise requirements for specific processes	
  	withName: fastqc {
		cpus = { check_max( 2, 'cpus' ) }
		memory = { check_max( 16.GB * task.attempt, 'memory' ) }
		time = { check_max( 12.h * task.attempt, 'time' ) }
		errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  	}
  	withName: BWA {
		cpus = { check_max( 4, 'cpus' ) }
		memory = { check_max( 24.GB * task.attempt, 'memory' ) }
		time = { check_max( 12.h * task.attempt, 'time' ) }
		errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  	}
  	withName: star {
		cpus = { check_max( 4, 'cpus' ) }
		memory = { check_max( 24.GB * task.attempt, 'memory' ) }
		time = { check_max( 12.h * task.attempt, 'time' ) }
		errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  	}
  	withName: bowtie2 {
		cpus = { check_max( 4, 'cpus' ) }
		memory = { check_max( 24.GB * task.attempt, 'memory' ) }
		time = { check_max( 12.h * task.attempt, 'time' ) }
		errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  	}
  	withName: spikeBWA {
		cpus = { check_max( 4, 'cpus' ) }
		memory = { check_max( 24.GB * task.attempt, 'memory' ) }
		time = { check_max( 12.h * task.attempt, 'time' ) }
		errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  	}
  	withName: spikeBowtie2 {
		cpus = { check_max( 4, 'cpus' ) }
		memory = { check_max( 24.GB * task.attempt, 'memory' ) }
		time = { check_max( 12.h * task.attempt, 'time' ) }
		errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  	}
  	withName: spikeStar {
		cpus = { check_max( 4, 'cpus' ) }
		memory = { check_max( 24.GB * task.attempt, 'memory' ) }
		time = { check_max( 12.h * task.attempt, 'time' ) }
		errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  	}
  	withName: getNormalizationFactor {
		cpus = { check_max( 1, 'cpus' ) }
		memory = { check_max( 4.GB * task.attempt, 'memory' ) }
		time = { check_max( 12.h * task.attempt, 'time' ) }
		errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  	}
  	withName: normalizeSamples {
		cpus = { check_max( 2, 'cpus' ) }
		memory = { check_max( 16.GB * task.attempt, 'memory' ) }
		time = { check_max( 12.h * task.attempt, 'time' ) }
		errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  	}
  	withName: bamSort {
		cpus = { check_max( 4, 'cpus' ) }
		memory = { check_max( 24.GB * task.attempt, 'memory' ) }
		time = { check_max( 12.h * task.attempt, 'time' ) }
		errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  	}
  	withName: markDuplicates {
		cpus = { check_max( 4, 'cpus' ) }
		memory = { check_max( 24.GB * task.attempt, 'memory' ) }
		time = { check_max( 12.h * task.attempt, 'time' ) }
		errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  	}
  	withName: preseqAnalysis {
		cpus = { check_max( 2, 'cpus' ) }
		memory = { check_max( 16.GB * task.attempt, 'memory' ) }
		time = { check_max( 12.h * task.attempt, 'time' ) }
		errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  	}
  	withName: bamFiltering {
		cpus = { check_max( 2, 'cpus' ) }
		memory = { check_max( 16.GB * task.attempt, 'memory' ) }
		time = { check_max( 12.h * task.attempt, 'time' ) }
		errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  	}
  	withName: PPQT {
		cpus = { check_max( 2, 'cpus' ) }
		memory = { check_max( 16.GB * task.attempt, 'memory' ) }
		time = { check_max( 12.h * task.attempt, 'time' ) }
		errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  	}
	withName: bigWigGeneration {
		cpus = { check_max( 2, 'cpus' ) }
		memory = { check_max( 16.GB * task.attempt, 'memory' ) }
		time = { check_max( 12.h * task.attempt, 'time' ) }
		errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
	}
	withName: deepToolsSingleQC {
		cpus = { check_max( 4, 'cpus' ) }
		memory = { check_max( 16.GB * task.attempt, 'memory' ) }
		time = { check_max( 12.h * task.attempt, 'time' ) }
		errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
	}
	withName: deepToolsCorrelQC {
		cpus = { check_max( 4, 'cpus' ) }
		memory = { check_max( 24.GB * task.attempt, 'memory' ) }
		time = { check_max( 12.h * task.attempt, 'time' ) }
		errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  	}
	withName: peakAnnoHomerBroad {
		cpus = { check_max( 2, 'cpus' ) }
		memory = { check_max( 16.GB * task.attempt, 'memory' ) }
		time = { check_max( 12.h * task.attempt, 'time' ) }
		errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  	}
	withName: peakAnnoHomerBroad {
		cpus = { check_max( 2, 'cpus' ) }
		memory = { check_max( 16.GB * task.attempt, 'memory' ) }
		time = { check_max( 12.h * task.attempt, 'time' ) }
		errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  	}
}


// Defaults only, expecting to be overwritten
params {
  max_memory = 128.GB
  max_cpus = 15
  max_time = 240.h

  samplePlan = "$baseDir/SAMPLE_PLAN.csv"
}
