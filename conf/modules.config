/*
 * Define modules options
 */

process {

  // Default
  publishDir = [
    path: { "${params.outDir}/${task.process.tokenize(':')[-1].tokenize('_')[0]}" },
    mode: 'copy',
    saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
  ]

  withName:'bamChipFlow:deeptoolsBamCoverage' {
    publishDir = [
      path: { "${params.outDir}/bigWig" },
      mode: 'copy',
      pattern: "*.bigwig"
    ]
    ext.prefix = { "${meta.id}_norm" }
    ext.args = [
      params.fragmentSize > 0 & !params.noReadExtension ? "--extendReads ${params.fragmentSize}" : params.noReadExtension ? "" : "--extendReads",
      "--normalizeUsing CPM --skipNonCoveredRegions"
    ].join(' ').trim()
  }

  withName:'bamSpikesFlow:deeptoolsBamCoverage' {
    publishDir = [
      path: { "${params.outDir}/bigWig" },
      mode: 'copy',
      pattern: "*.bigwig"
    ]
    ext.prefix = { "${meta.id}_spikenorm" }
    ext.args = [
      params.fragmentSize > 0 & !params.noReadExtension ? "--extendReads ${params.fragmentSize}" : params.noReadExtension ? "" : "--extendReads",
      "--normalizeUsing CPM --skipNonCoveredRegions"
    ].join(' ').trim()
  }

  withName:'mappingRef' {
    publishDir = [
      [
        path: { "${params.outDir}/mapping" },
	mode: 'copy',
	pattern: "*.bam",
	enabled: params.saveAlignedIntermediates
      ],
      [
        path: { "${params.outDir}/mapping/logs" },
	mode: 'copy',
	pattern: "*.log"
      ]
    ]
    ext.args = [
      params.bwaOpts && params.aligner == 'bwa-mem' ? params.bwaOpts : '',
      params.bowtie2Opts && params.aligner == 'bowtie2' ? params.bowtie2Opts : '',
      params.starOpts && params.aligner == 'star' ? params.starOpts : ''
    ].join(' ').trim()
  }

  withName:'mappingSpike' {
    publishDir = [
      [
        path: { "${params.outDir}/spike" },
	mode: 'copy',
	pattern: "*.bam",
	enabled: params.saveAlignedIntermediates
      ],
      [
        path: { "${params.outDir}/spike/logs" },
	mode: 'copy',
	pattern: "*.log"
      ]
    ]
    ext.args = [
      params.bwaOpts && params.aligner == 'bwa-mem' ? params.bwaOpts : '',
      params.bowtie2Opts && params.aligner == 'bowtie2' ? params.bowtie2Opts : '',
      params.starOpts && params.aligner == 'star' ? params.starOpts : ''
    ].join(' ').trim()
  }


  withName:'collectInsertSizeMetrics' {
    publishDir = [
      path: { "${params.outDir}/insertSize" },
      mode: 'copy'
    ]
    ext.args = "VALIDATION_STRINGENCY=LENIENT M=0.5"
  }

  withName:'compareBams' {
    publishDir = [
      [
        path: { "${params.outDir}/spike" },
	mode: 'copy',
	pattern: "*.bam"
      ],
      [
        path: { "${params.outDir}/spike/logs" },
	mode: 'copy',
	pattern: "*.log"
      ]
    ]
  }

  withName:'deeptoolsComputeMatrix' {
    publishDir = [
      path: { "${params.outDir}/deeptools/computeMatrix" },
      mode: 'copy'
    ]
    ext.args = "--downstream 2000 --upstream 2000 --skipZeros --binSize 100"
  }

  withName:'deeptoolsCorrelationQC' {
    publishDir = [
      path: { "${params.outDir}/deeptools/correlationQC" },
      mode: 'copy'
    ]
    ext.args = "--binSize=50000"
  }

  withName:'deeptoolsFingerprint' {
    publishDir = [
      path: { "${params.outDir}/deeptools/fingerprint" },
      mode: 'copy'
    ]
    ext.args = [
      params.singleEnd ? params.fragmentSize > 0 ? "--extendReads ${params.fragmentSize}" : "" : params.noReadExtension ? "" : "--extendReads",
      "--skipZeros --numberOfSamples 100000"
    ].join(' ').trim()
  }

  withName:'deeptoolsMultiBamSummary'{
    ext.args = "--binSize 10000"
  }


  withName:'epic2' {
    publishDir = [
      path: { "${params.outDir}/peakCalling/verybroad" },
      mode: 'copy'
    ]
    ext.args = [
      params.singleEnd && params.fragmentSize > 0 ? "--fragment-size ${params.fragmentSize}" : "",
      params.epic2Opts ?: ''
    ].join(' ').trim()
  }

  withName:'fastqc' {
    publishDir = [
      [
        path: { "${params.outDir}/fastqc/zips/" },
        mode: 'copy',
        pattern: "*.zip"
      ],
      [
        path: { "${params.outDir}/fastqc" },
	mode: "copy",
        saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
      ]
    ]
    ext.when = !params.skipFastqc
  }

  withName:'featureCounts' {
    publishDir = [
      [
        path: { "${params.outDir}/counts/summaries" },
        mode: 'copy',
        pattern: "*summary"
      ],
      [
        path: { "${params.outDir}/counts/" },
        mode: 'copy',
        pattern: "*counts.csv"
      ]
    ]
    ext.args = params.singleEnd ? '-C -B' : ''
    ext.prefix = { "allchip_counts_" + annot.toString() - ~/(\.saf)?$/ }
  }

  withName:'getSoftwareVersions' {
    publishDir = [
      path: { "${params.outDir}/softwareVersions" },
      mode: 'copy'
    ]
  }

  withName:'markDuplicates' {
    publishDir = [
      [
        path: { "${params.outDir}/markDuplicates" },
        mode: 'copy',
        pattern: "*markDups.bam",
        enabled: params.saveAlignedIntermediates
      ],
      [
        path: { "${params.outDir}/markDuplicates/metrics" },
        mode: 'copy',
        pattern: '*metrics.txt'
      ]
    ]
    ext.args = params.tmpDir ? "-Djava.io.tmpdir=${params.tmpDir}" : ''
  }

  withName:'macs2Sharp' {
    publishDir = [
        path: { "${params.outDir}/peakCalling/sharp" },
        mode: 'copy'
    ]
    ext.args = params.macs2Opts ?: ''
  }

  withName:'macs2Broad' {
    publishDir = [
        path: { "${params.outDir}/peakCalling/broad" },
        mode: 'copy'
    ]
    ext.args = [
      params.macs2Opts ?: '',
      params.broadCutoff ? "--broad-cutoff ${params.broadCutoff}" : ''
    ].join(' ').trim()
  }

  withName:'outputDocumentation' {
    publishDir = [
      path: { "${params.summaryDir}" },
      mode: 'copy'
    ]
  }

  withName: 'samtoolsSort' {
    publishDir = [
      path: { "${params.outDir}/mapping" },
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename },
      enabled: params.saveAlignedIntermediates
    ]
    ext.args = params.sortMaxMemory ? "-m ${params.sortMaxMemory}" : ''
  }

  withName: 'samtoolsIndex' {
    publishDir = [
      path: { "${params.outDir}/mapping" },
      mode: 'copy',
      pattern: '*.bai'
    ]
  }

  withName: 'samtoolsFilter' {
    publishDir = [
      path: { "${params.outDir}/mapping" },
      mode: 'copy',
      pattern: "*.bam"
    ]
    ext.args = [
      params.singleEnd ? "-F 0x004" : params.keepSingleton ? "-F 0x004" : "-F 0x004 -F 0x0008 -f 0x001",
      params.keepDups ? "" : "-F 0x0400",
      params.mapq > 0 ? "-q ${params.mapq}" : ""
    ].join(' ').trim()
  }

  withName: 'samtoolsFlagstat' {
    publishDir = [
      path: {"$params.outDir/mapping/stats/"},
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
  }

}